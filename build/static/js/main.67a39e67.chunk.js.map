{"version":3,"sources":["assets/png/001-resume.png","assets/png/002-linkedin.png","assets/png/003-instagram.png","assets/png/004-twitter.png","assets/docs/Resume (Dishant Kaushik).pdf","components/Link.js","pages/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Link","href","children","target","rel","Home","div","document","querySelector","addEventListener","e","console","log","style","setProperty","screenX","screenY","className","resume","src","resumeImg","alt","linkedInImg","instagramImg","twitterImg","Component","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mIAAAA,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,sD,sTCE5B,SAASC,EAAT,GAAmC,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,SACnC,OACE,uBAAGD,KAAMA,EAAME,OAAO,SAASC,IAAI,uBAChCF,G,qBCGcG,E,kLAEjB,IAAIC,EAAMC,SAASC,cAAc,cACjCF,EAAIG,iBAAiB,aAAa,SAACC,GACjCC,QAAQC,IAAIF,GACZJ,EAAIO,MAAMC,YAAY,OAAS,IAAOJ,EAAEK,QAAW,MACnDT,EAAIO,MAAMC,YAAY,OAAS,IAAOJ,EAAEM,QAAW,W,+BAIrD,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,QACb,uCACU,0BAAMA,UAAU,UAAhB,YAGV,yBAAKA,UAAU,SACb,4BACE,4BACE,kBAACjB,EAAD,CAAMC,KAAMiB,KACV,yBAAKC,IAAKC,IAAWC,IAAI,aAG7B,4BACE,kBAACrB,EAAD,CAAMC,KAAK,+CACT,yBAAKkB,IAAKG,IAAaD,IAAI,eAG/B,4BACE,kBAACrB,EAAD,CAAMC,KAAK,6CACT,yBAAKkB,IAAKI,IAAcF,IAAI,gBAGhC,4BACE,kBAACrB,EAAD,CAAMC,KAAK,kCACT,yBAAKkB,IAAKK,IAAYH,IAAI,sB,GApCVI,aCWnBC,MAdf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKT,UAAU,mBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOU,KAAK,KACV,kBAAC,EAAD,WCCQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5B,SAAS6B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.67a39e67.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/001-resume.830ad45a.png\";","module.exports = __webpack_public_path__ + \"static/media/002-linkedin.1b31f19b.png\";","module.exports = __webpack_public_path__ + \"static/media/003-instagram.701b01b9.png\";","module.exports = __webpack_public_path__ + \"static/media/004-twitter.ce91d313.png\";","module.exports = __webpack_public_path__ + \"static/media/Resume (Dishant Kaushik).5df15066.pdf\";","import React from 'react';\r\n\r\nexport default function Link({ href, children }) {\r\n  return (\r\n    <a href={href} target='_blank' rel='noopener noreferrer'>\r\n      {children}\r\n    </a>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport './Home.css';\r\nimport resumeImg from '../../assets/png/001-resume.png';\r\nimport linkedInImg from '../../assets/png/002-linkedin.png';\r\nimport instagramImg from '../../assets/png/003-instagram.png';\r\nimport twitterImg from '../../assets/png/004-twitter.png';\r\nimport Link from '../../components/Link';\r\nimport resume from '../../assets/docs/Resume (Dishant Kaushik).pdf';\r\nexport default class Home extends Component {\r\n  componentDidMount() {\r\n    let div = document.querySelector('.container');\r\n    div.addEventListener('mousemove', (e) => {\r\n      console.log(e);\r\n      div.style.setProperty('--x', -(0.01 * e.screenX) + 'px');\r\n      div.style.setProperty('--y', -(0.01 * e.screenY) + 'px');\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className='container'>\r\n        <div className='main'>\r\n          <h1>\r\n            Hi, I'm <span className='bolder'>Dishant</span>\r\n          </h1>\r\n\r\n          <div className='links'>\r\n            <ul>\r\n              <li>\r\n                <Link href={resume}>\r\n                  <img src={resumeImg} alt='Resume' />\r\n                </Link>\r\n              </li>\r\n              <li>\r\n                <Link href='https://www.linkedin.com/in/dishantkaushik/'>\r\n                  <img src={linkedInImg} alt='LinkedIn' />\r\n                </Link>\r\n              </li>\r\n              <li>\r\n                <Link href='https://www.instagram.com/dishantkaushik/'>\r\n                  <img src={instagramImg} alt='Instagram' />\r\n                </Link>\r\n              </li>\r\n              <li>\r\n                <Link href='https://twitter.com/dkaushik95'>\r\n                  <img src={twitterImg} alt='Twitter' />\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Home from './pages/Home/Home';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className='dark-background'>\r\n        <Switch>\r\n          <Route path='/'>\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}